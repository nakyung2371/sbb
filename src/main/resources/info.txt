
src/main/resources
	templates: View 페이지가 위치해야 될 폴더, thymeleaf <- spring boot
	static: 외부 css, 외부 js, 그림 이미지 
	application.properties: spring boot의 각종 설정, DB 설정, JPA, View 설정, 톰켓 포트 설정

build.gradle: 라이브러리 적용 파일(그래들)

어노테이션: @ <- 프레임워크의 기술을 자동으로 처리
	- @Controller <- client의 요청을 받는 클래스라고 정의
		- class 블락 할당, 스프링 프레임워크에 빈(객체화) 등록 (RAM 등록)
	- @Getmapping("/hello"): client의 get 요청을 처리하는 어노테이션
		- 메소드 위에 할당
		http://localhost:8585/hello
		- url
		- form method="get"
		- a href=""
		
	- @PostMapping("login.do")
		- form method="post" action="login.do"
		
	- @ResponseBody
		- 메소드 위에 할당, JSON 포멧으로 전송, 문자열 자체를 전송
		
Spring에서 라이브러리 관리, JDK와 Spring 버전에 관련된 호환성 문제를 자동으로 관리

	- 메이븐: xml 형식으로 관리
		https://mvnrepository.com/
		pom.xml: 파일에서 라이브러리 관리
	
	- 그래들: 그루비 문법으로 쉽게 관리
		build.gradle: 파일에서 관리
	
STS4에서 Java EE로 확장: html, jsp
	- 인코딩 타입: UTF-8 적용

lombok 작동: 

JPA: 인터페이스, SQL 쿼리없이 자바의 객체로 DB의 테이블을 생성, 
	 SQL 쿼리없이 자바의 객체의 메소드로 CRUD
	- 유지 보수를 아주 쉽게 할 수 있다.
	- JPA를 구현한 구현체 하니버네이트
	 
	ORM: 자바의 클래스나 메소드로 DB를 접근할 수 있도록 하는 기술
		- 유지 보수를 쉽게 함
		- 마이바티스(금융권) JPA(솔루션)
	
============================================================================
build.gradle: 라이브러리 등록
 1. JPA
 2. JDBC
 3. H2 DB
 4. Oracle DB
 5. MySQL DB
============================================================================	
application.properties <- 설정

============================================================================	
JPA 라이브러리가 등록 되었을 경우
@Entity: class 위에 할당
 - DB의 테이블을 매핑하는 클래스	
	
		//필드: 테이블의 컬럼과 연결
	//@Id: 필드 위에 할당, Primary Key(중복된 값을 못 넣도록 설정), 테이블에 반드시 1개가 적용
	//@GeneratedValue: 자동으로 값을 증가해서 생성해줌, @Id 같이 부여
	//@Column: 컬럼의 제약 사항을 적용	
	
	
	//해당 질문(Question): 1, 질문에 대한 답변(Answer): 다
	//하나의 질문에 대해서 모든 답변을 가져올 수 있다.
	//cascade=CascadeType.REMOVE	<- 질문이 제거될 때, 질문에 해당하는 모든 답변을 함께 제거
	@OneToMany(mappedBy = "question", cascade=CascadeType.REMOVE)
	
	//Foreign Key: Answer 테이블은 Question 테이블을 참조함
	//@ManyToOne: JPA에서 테이블 간의 관계 설정, 자식 테이블(Answer)에서 부모 테이블(Question)을 참조
	//question 컬럼은 Question 테이블의 Primary Key의 값이 들어옴
	//question 컬럼 이름이 question_id로 바뀜
	@ManyToOne
	
============================================================================
ORM: MyBatis, JPA, SQL 쿼리문을 쓰지 않고 메소드를 사용해서 CRUD 
Repository: DAO를 Repository라고 호칭한다. DB의 CRUD하는 메소드가 적용되어 있는 인터페이스

public interface QuestionRepository extends JpaRepository<Question, Integer> {}
	상위 인터페이스의 모든 메소드가 상속되어 내려옴
	JpaRepository에서 선언된 메소드가 상속되어 내려옴 
	  
	findAll(): select * from question
	save()   : insert, update
	delete() : delete
	 
JUnit Test: 로직을 모두 생성하기 전에 DB에 값이 잘 CRUD 되는지 테스트함
	- 라이브러리 등록
	
	
전체적인 로직:
client -> Controller -> Service(로직을 처리) (DTO: Entity) -> Repository

	Service 클래스:
		1. 반복적 코드를 방지할 수 있다.
		2. 보안을 향상할 수 있다. (Controller에서 Entity 클래스, Repository를 직접 접근하지 않는다.
		3. DTO(client) -> Entity(DB), 	Entity(DB) -> DTO(client)
		
============================================================================	
부트스트랩 적용
src/main/resource/templates : 뷰 페이지가 위치 (Thymeleaf), *.html
src/main/resource/static	: 외부 CSS, 외부 JavaScript, Image

Thymeleaf의 layout: JSP Include와 동일한 처리를 담당
	- 중복된 코드를 방지할 수 있다.
	- 유지보수를 쉽게 할 수 있다.
	- 라이브러리가 등록되어 있어야 함
		
		
유효성 체크:
	폼의 값을 체크해서 DB에 저장
	- JavaScript: FrontEnd 체크
	- validate 라이브러리를 사용해서 서버에서 유효성 체크: 모바일 환경에서

th:field="*{subject}"	<- name="subject" id="subject" value="subject"
th:field="*{content}"	<- name="content" id="content" value="content"
